name: CI Actions Test

on:
  push:
    paths:
      - "src/a/b.version"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout self
        uses: actions/checkout@v4

      - name: Prepare Preparing to test some commands.
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          ls -al
          ls -al /
          ls -al /etc
          id 
          sudo id

      - name: Prepare a
        run: |
          # cp -fr src/cf/run.sh $PWD/run.sh && chmod +x run.sh && ./run.sh
          cp -fr src/cf/run.sh . && chmod +x run.sh && ./run.sh
          # sudo chmod -R 777 ./run.sh; sudo chown -R root:root ./run.sh
          # bash ./run.sh

      - name: Prepare z
        run: |
          mkdir -p $PWD/mymain; install -d $PWD/mymain
          WORKING_DIR="$PWD/mymain"
          echo $WORKING_DIR
          mkdir -p $WORKING_DIR/cloudflared; install -d $WORKING_DIR/cloudflared
          sudo chmod -R 777 $WORKING_DIR/cloudflared; sudo chown -R root:root $WORKING_DIR/cloudflared
          echo $WORKING_DIR/cloudflared
          # https://github.com/cloudflare/cloudflared
          # https://hub.docker.com/r/cloudflare/cloudflared

          sudo docker run -itd \
            --name=cloudflared \
            --privileged \
            --cap-add=SYS_ADMIN --cap-add=NET_ADMIN --cap-add=NET_BIND_SERVICE \
            --network=host \
            --restart=always \
            -v $WORKING_DIR/cloudflared:$WORKING_DIR/cloudflared \
            -v $WORKING_DIR/dev/shm:$WORKING_DIR/dev/shm \
            cloudflare/cloudflared \
            tunnel --url http://localhost:54949 --no-autoupdate --edge-ip-version auto --protocol http2 --loglevel info --logfile $WORKING_DIR/cloudflared/cfed.log
            # tunnel --no-autoupdate --edge-ip-version auto --protocol auto run --token ${{ secrets.Argo_TOKEN }}
            # tunnel --no-autoupdate --edge-ip-version auto --protocol http2 run --token ${{ secrets.Argo_TOKEN }}

          cloudflared_images="$(docker images | grep cloudflared | awk 'NR==1 {print $1}')";if [ ${cloudflared_images} ]; then  echo "$(date +"%Y-%m-%d %H:%M:%S") === Successfully pulled cloudflared image."; else echo "$(date +"%Y-%m-%d %H:%M:%S") === Failed to pull cloudflared image."; fi

          sleep 15
          docker logs cloudflared
          cat $WORKING_DIR/cloudflared/cfed.log

          # Check if the file exists
          if [ ! -f "$WORKING_DIR/cloudflared/cfed.log" ]; then
              echo "File $WORKING_DIR/cloudflared/cfed.log does not exist. Exiting the script."
              exit 1
          fi

          argodomain=$(grep -oE 'https://[[:alnum:]+\.-]+\.trycloudflare\.com' $WORKING_DIR/cloudflared/cfed.log | sed 's@https://@@')
          echo "argodomain1 $argodomain"

          ISP=$(curl -s https://speed.cloudflare.com/meta | awk -F\" '{print $26"-"$18}' | sed -e 's/ /_/g')
          echo $ISP
          ISP1=$(curl -s https://speed.cloudflare.com/meta | jq -r '[.country, .asOrganization] | join("-")' | sed 's/ /_/g')
          echo $ISP1

          MY_UUID0="54212000-0000-0000-0000-000000000000"
          MY_UUID1="54212000-0000-0000-0000-000000000001"
          MY_UUID2="54212000-0000-0000-0000-000000000003"
          V0=$(echo "vless://${MY_UUID0}@bebecar.com:443?encryption=none&security=tls&sni=$argodomain&type=ws&host=$argodomain&path=%2Fvlessws#$ISP")
          echo $V0
          V1=$(echo "vless://${MY_UUID1}@bebecar.com:443?encryption=none&security=tls&sni=$argodomain&type=httpupgrade&host=$argodomain&path=%2Fvlesshttpupgrade#$ISP")
          echo $V1
          V2=$(echo "vless://${MY_UUID2}@bebecar.com:443?encryption=none&security=tls&sni=$argodomain&type=splithttp&host=$argodomain&path=%2Fvlesssplithttp#$ISP")
          echo $V2

          docker logs xray
          docker logs caddy
          docker logs cloudflared
          sleep 5
          docker ps -as
          docker logs xray
          docker ps -as
          docker logs caddy
          sleep 5
          docker logs cloudflared

      - name: Run Docker ps every 5 seconds for 30 minutes
        run: |
          INTERVAL=5
          TOTAL_TIME=1800  # 30 minutes in seconds
          START_TIME=$(date +%s)

          while true; do
              docker ps -as

              CURRENT_TIME=$(date +%s)
              ELAPSED_TIME=$((CURRENT_TIME - START_TIME))

              if [ "$ELAPSED_TIME" -ge "$TOTAL_TIME" ]; then
                  echo "Reached 30 minutes, stopping."
                  break
              fi

              sleep $INTERVAL
          done

      # - name: Pause for 30 minutes
      #   run: |
      #     sleep 5
      #     docker ps -as
      #     sleep 30m
