name: CI Actions Test

on:
  push:
    paths:
      - "src/a/b.version"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout self
        uses: actions/checkout@v4

      - name: Prepare Preparing to test some commands.
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          ls -al
          ls -al /
          ls -al /etc
          id 
          sudo id

      - name: Prepare a
        run: |
          # cp -fr src/cf/run.sh $PWD/run.sh && chmod +x run.sh && ./run.sh
          cp -fr src/cf/run.sh . && chmod +x run.sh && ./run.sh
          # sudo chmod -R 777 ./run.sh; sudo chown -R root:root ./run.sh
          # bash ./run.sh

      - name: Prepare z
        run: |
          mkdir -p $PWD/mymain; install -d $PWD/mymain
          WORKING_DIR="$PWD/mymain"
          echo $WORKING_DIR
          mkdir -p $WORKING_DIR/cloudflared; install -d $WORKING_DIR/cloudflared
          sudo chmod -R 777 $WORKING_DIR/cloudflared; sudo chown -R root:root $WORKING_DIR/cloudflared
          echo $WORKING_DIR/cloudflared
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[0;33m'
          RESET='\033[0m'

          # https://github.com/cloudflare/cloudflared
          # https://hub.docker.com/r/cloudflare/cloudflared

          echo -e "${GREEN}Starting cloudflared...${RESET}"
          sudo docker run -itd \
            --name=cloudflared \
            --privileged \
            --cap-add=SYS_ADMIN --cap-add=NET_ADMIN --cap-add=NET_BIND_SERVICE \
            --network=host \
            --restart=always \
            -v $WORKING_DIR/cloudflared:$WORKING_DIR/cloudflared \
            -v $WORKING_DIR/dev/shm:$WORKING_DIR/dev/shm \
            cloudflare/cloudflared \
            tunnel --url http://localhost:54949 --no-autoupdate --edge-ip-version auto --protocol http2 --loglevel info --logfile $WORKING_DIR/cloudflared/cfed.log
            # tunnel --no-autoupdate --edge-ip-version auto --protocol auto run --token ${{ secrets.Argo_TOKEN }}
            # tunnel --no-autoupdate --edge-ip-version auto --protocol http2 run --token ${{ secrets.Argo_TOKEN }}

          cloudflared_images="$(docker images | grep cloudflared | awk 'NR==1 {print $1}')";if [ ${cloudflared_images} ]; then  echo "$(date +"%Y-%m-%d %H:%M:%S") === Successfully pulled cloudflared image."; else echo "$(date +"%Y-%m-%d %H:%M:%S") === Failed to pull cloudflared image."; fi

          echo -e "${RED}Wait for 5 seconds${RESET}"
          for i in {5..1}; do
            echo -e "${YELLOW}Waiting... ${i} seconds${RESET}"
            sleep 1
          done

          echo -e "${GREEN}Check cloudflared logs${RESET}"
          docker logs cloudflared

          echo -e "${GREEN}Check if the file exists.${RESET}"
          if [ ! -f "$WORKING_DIR/cloudflared/cfed.log" ]; then
              echo "File $WORKING_DIR/cloudflared/cfed.log does not exist. Exiting the script."
              exit 1
          fi

          cat <<EOF > $WORKING_DIR/etc/xray/az.json
          {"log":{"access":"","error":"","loglevel":"warning"},"inbounds":[{"listen":"::","port":64949,"protocol":"socks","settings":{"auth":"noauth","udp":true},"tag":"socks"}],"outbounds":[{"tag":"proxy","protocol":"vless","settings":{"vnext":[{"address":"abuse.cloudflare.com","port":443,"users":[{"id":"54212000-0000-0000-0000-000000000000","encryption":"none"}]}]},"streamSettings":{"network":"ws","security":"tls","tlsSettings":{"allowInsecure":false,"serverName":"animation-bread-mobiles-msgid.trycloudflare.com"},"wsSettings":{"path":"/vlessws","headers":{"Host":"animation-bread-mobiles-msgid.trycloudflare.com"}}},"mux":{}},{"tag":"direct","protocol":"freedom","settings":{}},{"tag":"block","protocol":"blackhole","settings":{}}],"routing":{"domainStrategy":"AsIs","rules":[{"type":"field","port":"0-65535","outboundTag":"proxy"}]}}

          EOF

          server_name=$(grep -oP '[a-zA-Z0-9._-]+\.trycloudflare\.com' $WORKING_DIR/cloudflared/cfed.log | tail -n 1)
          sed -i "s/\"serverName\":\"[^\"]*\"/\"serverName\":\"$server_name\"/" $WORKING_DIR/etc/xray/az.json
          sed -i "s/\"Host\":\"[^\"]*\"/\"Host\":\"$server_name\"/" $WORKING_DIR/etc/xray/az.json
          cat $WORKING_DIR/etc/xray/az.json

          sudo docker run -itd \
            --name=xrayc \
            --privileged \
            --cap-add=SYS_ADMIN --cap-add=NET_ADMIN --cap-add=NET_BIND_SERVICE \
            --network=host \
            --restart=always \
            -v $WORKING_DIR/etc/xray/az.json:/etc/xray/config.json \
            -v $WORKING_DIR/dev/shm:$WORKING_DIR/dev/shm \
            teddysun/xray

          CONTAINER_NAME="xrayc"; if docker ps --filter "name=$CONTAINER_NAME" --format '{{.Names}}' | grep -wq "$CONTAINER_NAME"; then echo "$(date +"%Y-%m-%d %H:%M:%S") === Container $CONTAINER_NAME is running."; else echo "$(date +"%Y-%m-%d %H:%M:%S") === Container $CONTAINER_NAME is not running."; fi

          for i in {1..3}; do
              curl -s -x socks5://localhost:64949 https://ipinfo.io/ip && { echo -e "${GREEN}Success${RESET}"; break; } || { echo -e "${RED}Attempt $i failed. Retrying in 5 seconds...${RESET}"; for j in {1..5}; do echo -e "${YELLOW}Waiting... ${j} seconds${RESET}"; sleep 1; done; }

              if [ "$i" -eq 3 ]; then
                  echo -e "${RED}Failed after 3 attempts, restarting xray container...${RESET}"
                  sudo docker restart xray
              fi
          done

          echo -e "${GREEN}Restart cloudflared${RESET}"
          # sudo docker restart cloudflared
          echo -e "${RED}Wait for 10 seconds${RESET}"
          for i in {10..1}; do
            echo -e "${YELLOW}Waiting... ${i} seconds${RESET}"
            sleep 1
          done
          echo -e "${GREEN}Check cloudflared logs again${RESET}"
          docker logs cloudflared

          argodomain=$(grep -oE 'https://[[:alnum:]+\._-]+\.trycloudflare\.com' $WORKING_DIR/cloudflared/cfed.log | sed 's@https://@@')
          echo "argodomain $argodomain"

          argodomain1=$(grep -oP '[a-zA-Z0-9._-]+\.trycloudflare\.com' $WORKING_DIR/cloudflared/cfed.log | tail -n 1)
          echo "argodomain1 $argodomain1"
          argodomain=$argodomain1

          # sudo docker logs cloudflared > $WORKING_DIR/cloudflared/cfedaz.log
          # cat $WORKING_DIR/cloudflared/cfedaz.log
          # argodomain2=$(grep -oP '[\w.-]+\.trycloudflare\.com' $WORKING_DIR/cloudflared/cfedaz.log | tail -n 1)
          # echo "argodomain2 $argodomain2"

          ISP=$(curl -s https://speed.cloudflare.com/meta | awk -F\" '{print $26"-"$18}' | sed -e 's/ /_/g')
          echo $ISP
          ISP1=$(curl -s https://speed.cloudflare.com/meta | jq -r '[.country, .asOrganization] | join("-")' | sed 's/ /_/g')
          echo $ISP1

          MY_UUID0="54212000-0000-0000-0000-000000000000"
          MY_UUID1="54212000-0000-0000-0000-000000000001"
          MY_UUID2="54212000-0000-0000-0000-000000000003"
          V0=$(echo "vless://${MY_UUID0}@bebecar.com:443?encryption=none&security=tls&sni=$argodomain&type=ws&host=$argodomain&path=%2Fvlessws#$ISP")
          echo $V0
          V1=$(echo "vless://${MY_UUID1}@bebecar.com:443?encryption=none&security=tls&sni=$argodomain&type=httpupgrade&host=$argodomain&path=%2Fvlesshttpupgrade#$ISP")
          echo $V1
          V2=$(echo "vless://${MY_UUID2}@bebecar.com:443?encryption=none&security=tls&sni=$argodomain&type=splithttp&host=$argodomain&path=%2Fvlesssplithttp#$ISP")
          echo $V2

          echo -e "${RED}Wait for 5 seconds${RESET}"
          for i in {5..1}; do
            echo -e "${YELLOW}Waiting... ${i} seconds${RESET}"
            sleep 1
          done
          docker ps -as
          docker logs xray
          docker ps -as
          docker logs caddy

      - name: Run Docker ps every 5 seconds for 30 minutes
        run: |
          docker logs cloudflared
          INTERVAL=5
          TOTAL_TIME=1800  # 30 minutes in seconds
          START_TIME=$(date +%s)

          while true; do
              docker ps -as

              CURRENT_TIME=$(date +%s)
              ELAPSED_TIME=$((CURRENT_TIME - START_TIME))

              if [ "$ELAPSED_TIME" -ge "$TOTAL_TIME" ]; then
                  echo "Reached 30 minutes, stopping."
                  break
              fi

              sleep $INTERVAL
          done

      # - name: Pause for 30 minutes
      #   run: |
      #     sleep 5
      #     docker ps -as
      #     sleep 30m
