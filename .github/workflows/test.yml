name: DemoTest

on:
  workflow_dispatch:

jobs:
  push:
    runs-on: windows-latest

    # defaults:
    #   run:
    #     shell: msys2 {0}

    steps:
      - run: git config --global core.autocrlf input
      - name: Checkout
        uses: actions/checkout@v4

      - name: get source
        # shell: powershell
        shell: pwsh
        run: |
          echo run
          $PSVersionTable.PSVersion.Major, (Get-Host).Version.Major, $Host.Version.Major | Get-Random
          # choco install sed -y
          # perl --version
          # sed --version
          # cd $env:ProgramFiles\Mercurial
          # .\hg version
          $metadataNginx = Invoke-RestMethod http://nginx.org/en/download.html
          $metadataNginx -match 'nginx/Windows-(.*?)<';$releaseNginx = $matches[1]
          Start-BitsTransfer -Source "http://nginx.org/download/nginx-${releaseNginx}.tar.gz" -Destination "nginx-${releaseNginx}.tar.gz" -Dynamic
          tar -zxf "nginx-${releaseNginx}.tar.gz"
          Remove-Item "nginx-${releaseNginx}.tar.gz" -Force -Recurse *>$null
          Move-Item ".\nginx-${releaseNginx}*" -Destination ".\nginx" -Force
          
          $clfileto="$Env:ProgramFiles\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\$((Get-ChildItem -Path "$Env:ProgramFiles\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\" -Recurse -Name cl.exe)[0])"
          $clfileto | foreach-object { "{0}`t{1}" -f $_.Name, [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_).FileVersion } |% {$_ -match '\d{2}.\d{2}'};$clfilever=$Matches[0];$clfilever
          $newContent = switch -Wildcard -Regex -File .\nginx\auto\cc\msvc {
              'version:.*$' {
                  "NGX_MSVC_VER=${clfilever}"
                  $_
              }
              default { $_ }
          }
          $newContent | Set-Content .\nginx\auto\cc\msvc
          Get-Content .\nginx\auto\cc\msvc
          Get-ChildItem -Force
          Get-Location
          cd nginx
          Get-ChildItem -Force
          echo end

      # - name: Configure Makefile
      #   working-directory: ${{runner.workspace}}
      #   run: |
      #     Get-Location
      #     Get-ChildItem -Force

      - uses: msys2/setup-msys2@v2

      - name: Configure Makefile
        shell: msys2 {0}
        run: |
          uname -a
          pwd
          ls -al
          cd nginx
          CUR=$PWD
          pwd
          ls -al
          wget https://github.com/PCRE2Project/pcre2/releases/download/pcre2-10.42/pcre2-10.42.tar.gz
          wget http://zlib.net/zlib-1.3.tar.gz
          wget https://www.openssl.org/source/openssl-3.0.11.tar.gz
          mkdir -p objs/lib
          install -d objs/lib
          cd objs/lib
          tar -zxf ../../pcre2-10.42.tar.gz
          tar -zxf ../../zlib-1.3.tar.gz
          tar -zxf ../../openssl-3.0.11.tar.gz
          # tar -zxvf ../../pcre2-10.42.tar.gz
          # tar -zxvf ../../zlib-1.3.tar.gz
          # tar -zxvf ../../openssl-3.0.11.tar.gz
          pwd
          # cd ..
          # pwd
          # cd ..
          # pwd
          cd $CUR
          pwd
 
      # - name: Make
      #   # shell: powershell
      #   shell: pwsh
      #   run: |
      #     function Invoke-CmdScript {
      #       param(
      #         [String] $scriptName
      #       )
      #       $cmdLine = """$scriptName"" $args & set"
      #       & $Env:SystemRoot\system32\cmd.exe /c $cmdLine |
      #       select-string '^([^=]*)=(.*)$' | foreach-object {
      #         $varName = $_.Matches[0].Groups[1].Value
      #         $varValue = $_.Matches[0].Groups[2].Value
      #         set-item -force Env:$varName $varValue
      #       }
      #     }
      #     Invoke-CmdScript "$Env:ProgramFiles\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x86
      #     cl
      #     Get-Location
      #     Get-ChildItem -Force
      #     cd nginx
      #     Get-ChildItem -Force
      #     nmake
      #     nmake -f objs/Makefile
      #     .\objs\nginx.exe -V
