name: AutoCheck

on:
  workflow_dispatch:

jobs:
  autocheck:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # - name: Delete workflow runs
      #   uses: Mattraks/delete-workflow-runs@main
      #   with:
      #     token: ${{ github.token }}
      #     repository: ${{ github.repository }}
      #     retain_days: 0
      #     keep_minimum_runs: 0

      - run: mkdir -p path/to/artifact

      - run: echo hello > path/to/artifact/world0.txt

      - run: echo hello > path/to/artifact/world1.txt

      - run: echo hello > path/to/artifact/world2.txt

      - name: Delete old release
        shell: pwsh
        env:
          # GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        run: |
          try { Remove-Item alias:curl -Force -Recurse *>$null }
          catch { Write-Host $_ *>$null }
          $TARGET_TAG="caddy"
          # https://docs.github.com/en/rest/git/refs#get-a-reference
          $TARGET_HTTP_CODE=$(curl -sI -w "%{http_code}" -o "nul" `
            -H "Authorization: Bearer ${{ env.GH_TOKEN }}" `
            https://api.github.com/repos/${{ github.repository }}/git/ref/tags/${TARGET_TAG} )

          # https://docs.github.com/en/rest/releases/releases#get-a-release-by-tag-name
          # $TARGET_HTTP_CODE=$(curl -sI -w "%{http_code}" -o "nul" `
          #   -H "Authorization: Bearer ${{ env.GH_TOKEN }}" `
          #   https://api.github.com/repos/${{ github.repository }}/releases/tags/${TARGET_TAG} )

          if ( ${TARGET_HTTP_CODE} -ne 200 ){
              # echo "Fail: ${TARGET_HTTP_CODE}"
              # echo "No target tag or release found, skip delete."
              "$((Get-Date -UFormat "%F %T")) === Fail: ${TARGET_HTTP_CODE}"
              "$((Get-Date -UFormat "%F %T")) === No target tag or release found, skip delete."
          }else{
              # echo "Success: ${TARGET_HTTP_CODE}"
              "$((Get-Date -UFormat "%F %T")) === Success: ${TARGET_HTTP_CODE}"
              # gh release delete "${TARGET_TAG}" -y --cleanup-tag
              # gh release delete "${TARGET_TAG}" --yes --cleanup-tag
              try { gh release delete "${TARGET_TAG}" --yes --cleanup-tag }
              catch { Write-Host $_ *>$null }
              # echo "Target tag or release ${TARGET_TAG} deleted Complete!"
              
              # while($True){
              for (;;){
                  "$((Get-Date -UFormat "%F %T")) === check release exist"
                  $TARGET_HTTP_CODE_TAG=$(curl -sI -w "%{http_code}" -o "nul" `
                  -H "Authorization: Bearer ${{ env.GH_TOKEN }}" `
                  https://api.github.com/repos/${{ github.repository }}/git/ref/tags/${TARGET_TAG} )
              
                  $TARGET_HTTP_CODE_RELEASE=$(curl -sI -w "%{http_code}" -o "nul" `
                    -H "Authorization: Bearer ${{ env.GH_TOKEN }}" `
                    https://api.github.com/repos/${{ github.repository }}/releases/tags/${TARGET_TAG} )
              
                  $TARGET_HTTP_CODE_TAG
                  $TARGET_HTTP_CODE_RELEASE
                  if ( ${TARGET_HTTP_CODE_TAG} -eq 404 -and ${TARGET_HTTP_CODE_RELEASE} -eq 404 ) {
                      "$((Get-Date -UFormat "%F %T")) === release is no exist ready to upload"
                      break
                  }else {
                      "$((Get-Date -UFormat "%F %T")) === release exist retrying"
                  }
                  $TARGET_HTTP_CODE_TAG
                  $TARGET_HTTP_CODE_RELEASE
                  Start-Sleep -Seconds 3
              }
              "$((Get-Date -UFormat "%F %T")) === Target tag or release ${TARGET_TAG} deleted Complete!"
          }

      - name: Upload to GitHub Release for all platform
        uses: softprops/action-gh-release@v1
        with:
          name: Rolling Release
          tag_name: caddy
          body: These are automatically updated builds of the latest commit.
          files: "path/to/artifact/*"
          token: ${{ secrets.GITHUB_TOKEN }}
