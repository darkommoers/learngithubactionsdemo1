name: AutoCheck

on:
  workflow_dispatch:

jobs:
  autocheck:
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: full
      CARGO_TERM_COLOR: always
    strategy:
      fail-fast: false
      matrix:
        config:
          # - { goos: windows, target: i686-pc-windows-gnu }
          # - { goos: windows, target: i686-pc-windows-msvc }
          # - { goos: windows, target: x86_64-pc-windows-gnu }
          # - { goos: windows, target: x86_64-pc-windows-msvc }
          # - { goos: windows, target: aarch64-pc-windows-msvc }
          - { goos: linux, target: i686-unknown-linux-gnu }
          - { goos: linux, target: i686-unknown-linux-musl }
          - { goos: linux, target: x86_64-unknown-linux-gnu }
          - { goos: linux, target: x86_64-unknown-linux-musl }
          # - { goos: linux, target: armv5te-unknown-linux-gnueabi }
          # - { goos: linux, target: armv5te-unknown-linux-musleabi }
          # - { goos: linux, target: arm-unknown-linux-gnueabi }
          # - { goos: linux, target: arm-unknown-linux-musleabi }
          # - { goos: linux, target: arm-unknown-linux-gnueabihf }
          # - { goos: linux, target: arm-unknown-linux-musleabihf }
          # - { goos: linux, target: armv7-unknown-linux-gnueabi }
          # - { goos: linux, target: armv7-unknown-linux-musleabi }
          # - { goos: linux, target: armv7-unknown-linux-gnueabihf }
          # - { goos: linux, target: armv7-unknown-linux-musleabihf }
          - { goos: linux, target: aarch64-unknown-linux-gnu }
          - { goos: linux, target: aarch64-unknown-linux-musl }
          # - { goos: linux, target: mips64el-unknown-linux-gnuabi64 } # no work
          # - { goos: linux, target: mips64el-unknown-linux-muslabi64 }
          # - { goos: linux, target: powerpc64le-unknown-linux-gnu }
          # - { goos: linux, target: powerpc64le-unknown-linux-musl } # no work
          # - { goos: linux, target: riscv64gc-unknown-linux-gnu }
          # - { goos: linux, target: riscv64gc-unknown-linux-musl } # no work
          # - { goos: linux, target: s390x-unknown-linux-gnu }
          # - { goos: linux, target: s390x-unknown-linux-musl } # no work
    steps:
      - name: Checkout self
        uses: actions/checkout@v4

      - name: Checkout phantun repo
        uses: actions/checkout@v4
        with:
          repository: dndx/phantun
          path: phantun

      # - name: Checkout phantun repo
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     # GH_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      #   run: |
      #     git clone https://github.com/dndx/phantun.git
      #     # gh repo clone dndx/phantun

      - name: Copy phantun repo
        run: |
          # cp -fr phantun/* $PWD
          cp -fr phantun/* .
          ls -al

      - name: To see rust a list of available targets
        run: rustup target list

      - name: Install Rust
        run: |
          rustup set profile minimal
          rustup toolchain install stable
          rustup default stable
          rustup override set stable
          # rustup target add ${{ matrix.config.target }}
          # rustup target add --toolchain stable ${{ matrix.config.target }}

      - name: Install cross
        run: |
          cargo install cross
          # cargo install cross --git https://github.com/cross-rs/cross

      - name: Build ${{ matrix.config.target }}
        run: |
          cross build --release --target ${{ matrix.config.target }}
          # cargo build --release --target ${{ matrix.config.target }}

      - name: Rename artifacts and compress
        run: |
          mkdir -p path/to/ready; install -d path/to/ready
          ls -al
          currrr=$PWD
          cd target/${{ matrix.config.target }}/release
          ls -al
          mv client phantun_client
          mv server phantun_server
          zip -9vr phantun_${{ matrix.config.target }}.zip phantun_client phantun_server
          cp -fr phantun_${{ matrix.config.target }}.zip $currrr/path/to/ready
          ls -lhR $currrr/path/to/ready

      - name: Upload to GitHub Release for all platform
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # GH_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        run: |
          target_name="phantun"
          if [[ "$(gh api repos/{owner}/{repo}/tags --jq '.[].name')" = "${target_name}" ]]; then
          gh release upload "${target_name}" path/to/ready/* --clobber
          else
          gh release create phantun path/to/ready/* --title "phantun Rolling Release" --notes "These are automatically updated builds of the latest commit."
          fi

      # - name: Upload to GitHub Release for all platform
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     # GH_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      #   uses: ncipollo/release-action@v1
      #   with:
      #     name: phantun Rolling Release
      #     tag: phantun
      #     body: These are automatically updated builds of the latest commit.
      #     artifacts: "target/${{ matrix.config.target }}/release/*.zip"
      #     allowUpdates: true
      #     # token: ${{ secrets.GITHUB_TOKEN }}
      #     # token: ${{ secrets.MY_GITHUB_TOKEN }}
