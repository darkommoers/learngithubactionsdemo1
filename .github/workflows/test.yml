name: AutoCheck

on:
  workflow_dispatch:

env:
  REGISTRY_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/wireguard

jobs:
  autocheck:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/386
          - linux/amd64
          - linux/arm/v6
          - linux/arm/v7
          - linux/arm64/v8
          - linux/ppc64le
          - linux/s390x
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Dockerfile
        run: |
          cp -fr src/wireguard/* $PWD

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,enable=true,value=latest
            type=raw,enable=true,value=alpine

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          provenance: false
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@v3
        with:
          name: digests-alpine
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  autocheck1:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/386
          - linux/amd64
          - linux/arm/v5
          - linux/arm/v7
          - linux/arm64/v8
          - linux/mips64le
          - linux/ppc64le
          - linux/s390x
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Dockerfile
        run: |
          cp -fr src/wireguard/* $PWD

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,enable=true,value=debian

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.debian
          provenance: false
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@v3
        with:
          name: digests-debian
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs: [autocheck,autocheck1]
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Download digests alpine
        uses: actions/download-artifact@v3
        with:
          name: digests-alpine
          path: /tmp/digests-alpine
      - name: Docker meta alpine
        id: meta-alpine
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,enable=true,value=latest
            type=raw,enable=true,value=alpine
      - name: Create manifest list and push alpine
        working-directory: /tmp/digests-alpine
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
      - name: Inspect images alpine
        run: |
          for i in $(echo $DOCKER_METADATA_OUTPUT_TAGS | xargs); do
            echo "Inspect image: $i"
            docker buildx imagetools inspect $i
          done

      - name: Download digests debian
        uses: actions/download-artifact@v3
        with:
          name: digests-debian
          path: /tmp/digests-debian
      - name: Docker meta debian
        id: meta-debian
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,enable=true,value=debian
      - name: Create manifest list and push debian
        working-directory: /tmp/digests-debian
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
      - name: Inspect images debian
        run: |
          for i in $(echo $DOCKER_METADATA_OUTPUT_TAGS | xargs); do
            echo "Inspect image: $i"
            docker buildx imagetools inspect $i
          done
