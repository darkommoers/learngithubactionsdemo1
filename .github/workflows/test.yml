name: AutoCheck

on:
  workflow_dispatch:

env:
  CONTENT_TARGET: "cloudflared"
  CONTENT_REPO: "cloudflare/cloudflared"
  CONTENT_VERSION: "src/cloudflared/cloudflared.version"

jobs:
  autocheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # - name: Delete workflow runs
      #   uses: Mattraks/delete-workflow-runs@main
      #   with:
      #     token: ${{ github.token }}
      #     repository: ${{ github.repository }}
      #     retain_days: 0
      #     keep_minimum_runs: 0

      # - name: Run a multi-line script
      #   run: |
      #     TARGET_TAG=${{ env.CONTENT_TARGET }}
      #     TARGET_NAME="$(echo $TARGET_TAG | sed 's/^./\u&/')"
      #     echo "$TARGET_TAG"
      #     echo "$TARGET_NAME"
      #     echo ${{ env.CONTENT_REPO }}
      #     echo ${{ env.CONTENT_VERSION }}
      #     pwd
      #     mkdir -p ${{ env.CONTENT_TARGET }}
      #     cd ./${{ env.CONTENT_TARGET }}
      #     pwd
      #     id
      #     mkdir -p src/cloudflared
      #     echo 233255 > ${{ env.CONTENT_VERSION }}
      #     echo "-X main.Version=$(cat "${{ env.CONTENT_VERSION }}" | head -n1) -X main.BuildTime=$(date -u '+%Y-%m-%d-%H%M UTC')"

      - name: Update latest version of npm
        run: |
          echo "$(npm --version)"
          npm install -g npm@latest
          echo "$(npm -v)"

      # - run: mkdir -p path/to/artifact

      # - run: echo hello > path/to/artifact/world0.txt

      # - run: echo hello > path/to/artifact/world1.txt

      # - run: echo hello > path/to/artifact/world2.txt

      # - name: Upload to GitHub Release for all platform
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     # GH_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      #   run: |
      #     TARGET_TAG="chisel"
      #     if [[ "$(gh api repos/{owner}/{repo}/tags --jq '.[].name')" = "${TARGET_TAG}" ]]; then
      #     gh release upload "${TARGET_TAG}" path/to/artifact/* --clobber
      #     else
      #     gh release create "${TARGET_TAG}" path/to/artifact/* --title "Chisel Rolling Release" \
      #     --notes "Chisel Version: <code>[v1.9.1](https://github.com/jpillora/chisel/releases/tag/v1.9.1)</code><br><br>**These are automatically updated builds of the latest commit.**"
      #     fi

      # - run: |
      #     mkdir -p path\to\ready
      #     echo hello > path\to\ready\world0.txt
      #     echo hello > path\to\ready\world1.txt
      #     echo hello > path\to\ready\world2.txt

      # - name: Upload to GitHub Release for all platform
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     # GH_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      #     CONTENT_PATH: "src/haproxy/haproxy.version"
      #   run: |
      #     $TARGET_TAG="haproxy"
      #     $TARGET_VERSION=$(cat ${{ env.CONTENT_PATH }})
      #     gh release create "${TARGET_TAG}" (Get-Item ".\path\to\ready\*" -Force) --title "Haproxy Rolling Release" `
      #     --notes "Haproxy Version: <code>[${TARGET_VERSION}](https://github.com/haproxy/haproxy/releases/tag/${TARGET_VERSION})</code><br><br>**These are automatically updated builds of the latest commit.**"

      # - name: Delete old tag
      #   env:
      #     # GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     GH_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      #   run: |
      #     TARGET_TAG="release"
      #     curl -sL \
      #       -X DELETE \
      #       -H "Authorization: Bearer ${GH_TOKEN}" \
      #       https://api.github.com/repos/${{ github.repository }}/git/refs/tags/${TARGET_TAG}

      # - name: Upload to GitHub Release for all platform
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     name: Rolling Release
      #     tag_name: release
      #     body: These are automatically updated builds of the latest commit.
      #     files: "path/to/artifact/*"
      #     token: ${{ secrets.GITHUB_TOKEN }}
      
      # - run: |
      #     mkdir -p path\to\ready
      #     echo hello > path\to\ready\world0.txt
      #     echo hello > path\to\ready\world1.txt
      #     echo hello > path\to\ready\world2.txt

      # - name: Upload to GitHub Release for all platform
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     # GH_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      #     CONTENT_PATH: "src/haproxy/haproxy.version"
      #   run: |
      #     $TARGET_TAG="haproxy"
      #     $TARGET_VERSION=$(cat ${{ env.CONTENT_PATH }})
      #     gh release create "${TARGET_TAG}" (Get-Item ".\path\to\ready\*" -Force) --title "Haproxy Rolling Release" `
      #     --notes "Haproxy Version: <code>[${TARGET_VERSION}](https://github.com/haproxy/haproxy/releases/tag/${TARGET_VERSION})</code><br><br>**These are automatically updated builds of the latest commit.**"
