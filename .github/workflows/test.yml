name: DemoTest

on:
  workflow_dispatch:

jobs:
  push:
    runs-on: windows-latest

    # defaults:
    #   run:
    #     shell: msys2 {0}

    steps:
      - run: git config --global core.autocrlf input
      - name: Checkout
        uses: actions/checkout@v4

      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            coreutils
            curl
            wget
            diffutils
            git
            gawk
            gcc
            gdb
            make
            tar
            zip
            openssl
            openssl-devel
            pcre-devel
            pcre2-devel
            zlib-devel
      - name: Compile CI-Build
        shell: msys2 {0}
        run: |
          echo 'Running in MSYS2!'
          gcc --version
          g++ --version
          gdb --version
          make --version
          git clone https://github.com/haproxy/haproxy.git
          cd haproxy || exit 2
          ls -al

      - name: Compile HAProxy with 
        shell: msys2 {0}
        run: |
          echo "RUN"
          cd haproxy || exit 2
          ls -al
          make -j$(nproc) all \
            TARGET=cygwin \
            USE_GETADDRINFO=1 USE_OPENSSL=1 USE_PROMEX=1 USE_PCRE2=1 USE_PCRE2_JIT=1 USE_THREAD=1 USE_ZLIB=1
          echo "END"
      
      - name: Show HAProxy version
        shell: msys2 {0}
        run: |
          ls -al
          ./haproxy -vv

      # - name: Delete old release
      #   env:
      #     # GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     GH_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      #   run: |
      #     TARGET_TAG="caddy"
      #     # https://docs.github.com/en/rest/git/refs#get-a-reference
      #     TARGET_HTTP_CODE=$(curl -sI -w '%{http_code}'"\n" -o '/dev/null' \
      #       -H "Authorization: Bearer ${GH_TOKEN}" \
      #       https://api.github.com/repos/${{ github.repository }}/git/ref/tags/${TARGET_TAG} )

      #     # https://docs.github.com/en/rest/releases/releases#get-a-release-by-tag-name
      #     # TARGET_HTTP_CODE=$(curl -sI -w '%{http_code}'"\n" -o '/dev/null' \
      #     #   -H "Authorization: Bearer ${GH_TOKEN}" \
      #     #   https://api.github.com/repos/${{ github.repository }}/releases/tags/${TARGET_TAG} )

      #     if [[ ${TARGET_HTTP_CODE} != 200 ]]; then
      #     # if [[ "$TARGET_HTTP_CODE" -ne 200 ]]; then
      #       # echo "Fail: ${TARGET_HTTP_CODE}"
      #       # echo "No target tag or release found, skip delete."
      #       echo -e "\033[1;40;96m$(date '+%F %T') === Fail: \033[0m\e[7;47;94m${TARGET_HTTP_CODE}\e[0m"
      #       echo -e "\033[1;40;91m$(date '+%F %T') === No target tag or release found, skip delete. \033[0m"
      #     else
      #       # echo "Success: ${TARGET_HTTP_CODE}"
      #       echo -e "\033[1;40;92m$(date '+%F %T') === Success: \033[0m\e[7;47;96m${TARGET_HTTP_CODE}\e[0m"
      #       # gh release delete "${TARGET_TAG}" -y --cleanup-tag
      #       gh release delete "${TARGET_TAG}" --yes --cleanup-tag
      #       # echo "Target tag or release ${TARGET_TAG} deleted Complete!"
      #       echo -e "\033[1;40;94m$(date '+%F %T') === Target tag or release \e[7;47;96m${TARGET_TAG}\e[0m\033[1;40;94m deleted Complete! \033[0m"
      #     fi

