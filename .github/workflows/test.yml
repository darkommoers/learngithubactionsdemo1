name: AutoCheck

on:
  workflow_dispatch:

jobs:
  autocheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # - name: Delete workflow runs
      #   uses: Mattraks/delete-workflow-runs@main
      #   with:
      #     token: ${{ github.token }}
      #     repository: ${{ github.repository }}
      #     retain_days: 0
      #     keep_minimum_runs: 0

      - run: mkdir -p path/to/artifact

      - run: echo hello > path/to/artifact/world0.txt

      - run: echo hello > path/to/artifact/world1.txt

      - run: echo hello > path/to/artifact/world2.txt
      - run: |
            echo -e "\e[30;48;5;1m Hello\e[0m"
            echo -e "\e[30;48;5;2m Hello\e[0m"
            echo -e "\e[30;48;5;3m Hello\e[0m"
            echo -e "\e[30;48;5;4m Hello\e[0m"
            echo -e "\e[30;48;5;5m Hello\e[0m"
            echo -e "\e[30;48;5;6m Hello\e[0m"
            echo -e "\e[30;48;5;7m Hello\e[0m"
            echo -e "\e[30;48;5;8m Hello\e[0m"
            echo -e "\e[30;48;5;9m Hello\e[0m"
            echo -e "\e[30;48;5;10m Hello\e[0m"
            echo -e "\e[30;48;5;11m Hello\e[0m"
            echo -e "\e[30;48;5;12m Hello\e[0m"
            echo -e "\e[30;48;5;13m Hello\e[0m"
            echo -e "\e[30;48;5;14m Hello\e[0m"
            echo -e "\e[30;48;5;15m Hello\e[0m"

      - name: Delete old release
        env:
          # GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        run: |
          TARGET_TAG="caddy"
          # https://docs.github.com/en/rest/git/refs#get-a-reference
          TARGET_HTTP_CODE=$(curl -sI -w "%{http_code}" -o "/dev/null" \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            https://api.github.com/repos/${{ github.repository }}/git/ref/tags/${TARGET_TAG} )

          # https://docs.github.com/en/rest/releases/releases#get-a-release-by-tag-name
          # TARGET_HTTP_CODE=$(curl -sI -w "%{http_code}" -o "/dev/null" \
          #   -H "Authorization: Bearer ${GH_TOKEN}" \
          #   https://api.github.com/repos/${{ github.repository }}/releases/tags/${TARGET_TAG} )

          if [[ ${TARGET_HTTP_CODE} != 200 ]]; then
          # if [[ "$TARGET_HTTP_CODE" -ne 200 ]]; then
            # echo "Fail: ${TARGET_HTTP_CODE}"
            # echo "No target tag or release found, skip delete."
            echo -e "\033[1;40;96m$(date '+%F %T') === Fail: \033[0m\e[30;48;5;1m${TARGET_HTTP_CODE}\e[0m"
            echo -e "\033[1;40;91m$(date '+%F %T') === No target tag or release found, skip delete. \033[0m"
          else
            # echo "Success: ${TARGET_HTTP_CODE}"
            echo -e "\033[1;40;92m$(date '+%F %T') === Success: \033[0m\e[30;48;5;2m${TARGET_HTTP_CODE}\e[0m"
            # gh release delete "${TARGET_TAG}" -y --cleanup-tag || echo -e "\033[1;40;96m$(date '+%F %T') === Fail: \033[0m\e[30;48;5;1m${TARGET_TAG} release not found\e[0m"
            gh release delete "${TARGET_TAG}" --yes --cleanup-tag || echo -e "\033[1;40;96m$(date '+%F %T') === Fail: \033[0m\e[30;48;5;1m${TARGET_TAG} release not found\e[0m"
            # echo "Target tag or release ${TARGET_TAG} deleted Complete!"

            while true; do
            # until false; do

            echo "$(date '+%F %T') === check release exist"
            # https://docs.github.com/en/rest/releases/releases#get-a-release-by-tag-name
            TARGET_HTTP_CODE=$(curl -sI -w "%{http_code}" -o "/dev/null" \
              -H "Authorization: Bearer ${GH_TOKEN}" \
              https://api.github.com/repos/${{ github.repository }}/releases/tags/${TARGET_TAG} )

            if [[ ${TARGET_HTTP_CODE} == 404 ]] &>/dev/null; then
            echo "$(date '+%F %T') === release is no exist ready to upload"
            break 49
            else
            echo "$(date '+%F %T') === release exist retrying"
            fi

            sleep 3
            done

            echo -e "\033[1;40;94m$(date '+%F %T') === Target tag or release \e[0m\e[30;48;5;4m${TARGET_TAG}\e[0m\033[1;40;94m deleted Complete! \033[0m"
          fi

      - name: Upload to GitHub Release for all platform
        uses: softprops/action-gh-release@v1
        with:
          name: Rolling Release
          tag_name: caddy
          body: These are automatically updated builds of the latest commit.
          files: "path/to/artifact/*"
          token: ${{ secrets.GITHUB_TOKEN }}
