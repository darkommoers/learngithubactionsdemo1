name: Deploy Pages

on:
  push:
    paths:
      - "src/cloudflared/cloudflared.version"
  workflow_dispatch:
  repository_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy Pages
    outputs:
      RESULT_ID: ${{ steps.final_pass.outputs.RESULT_ID }}
      RESULT_NAME: ${{ steps.final_pass.outputs.RESULT_NAME }}
      RESULT_SUBDOMAIN: ${{ steps.final_pass.outputs.RESULT_SUBDOMAIN }}
      RESULT_DOMAINS: ${{ steps.final_pass.outputs.RESULT_DOMAINS }}
      RESULT_SUCCESS: ${{ steps.final_pass.outputs.RESULT_SUCCESS }}
    steps:
      - name: Checkout private repo test
        uses: actions/checkout@v4
        with:
          repository: darkommoers/mainal
          path: mainal
          token: ${{ secrets.MY_GITHUB_TOKEN }}

      - name: Prepare init
        id: init_pass
        run: |
          ls -al
          ls -al mainal
          cat mainal/cf/pages/wrangler.toml
          sed -i 's/compatibility_date = "[^"]*"/compatibility_date = "'$(date +"%Y-%m-%d")'"/' mainal/cf/pages/wrangler.toml
          cat mainal/cf/pages/wrangler.toml

          echo "MY_PROJECT_NAME=$(sed -n 's/^name = "\(.*\)"$/\1/p' mainal/cf/pages/wrangler.toml)" >> $GITHUB_ENV
          MY_PROJECT_NAME=$(sed -n 's/^name = "\(.*\)"$/\1/p' mainal/cf/pages/wrangler.toml)
          echo $MY_PROJECT_NAME

          RESULT_RESPONSE=$(curl -s https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects/$MY_PROJECT_NAME \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json")

          echo "RESULT_NAME=$MY_PROJECT_NAME" >> $GITHUB_ENV
          echo "RESULT_NAME=${MY_PROJECT_NAME}" >> "$GITHUB_OUTPUT"
          echo "RESULT_SUCCESS=$(echo "$RESULT_RESPONSE" | jq -r '.success')" >> $GITHUB_ENV
          echo "RESULT_SUCCESS=$(echo "${RESULT_RESPONSE}" | jq -r '.success')" >> "$GITHUB_OUTPUT"

      - name: Deploy Pages
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: "mainal/cf/pages"
          preCommands: |
            echo "*** pre commands ***"
            echo "GITHUB_ENV ${{ env.RESULT_SUCCESS }}"
            echo "GITHUB_OUTPUT ${{ steps.init_pass.outputs.RESULT_SUCCESS }}"
            [ "$RESULT_SUCCESS" = "false" ] && echo "Project not found, creating new project..." && npx wrangler pages project create $MY_PROJECT_NAME --production-branch main || echo "Project already exists, no action needed."
          postCommands: |
            echo "*** post commands ***"
          command: |
            pages project list
            pages deploy .
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare final
        id: final_pass
        run: |
          echo "GITHUB_ENV ${{ env.RESULT_NAME }}"
          echo "GITHUB_OUTPUT ${{ steps.init_pass.outputs.RESULT_NAME }}"
          RESULT_RESPONSE=$(curl -s https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects/$MY_PROJECT_NAME \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json")

          echo "RESULT_ID=$(echo "$RESULT_RESPONSE" | jq -r '.result.id')" >> "$GITHUB_OUTPUT"
          echo "RESULT_NAME=$(echo "${RESULT_RESPONSE}" | jq -r '.result.name')" >> "$GITHUB_OUTPUT"
          echo "RESULT_SUBDOMAIN=$(echo "${RESULT_RESPONSE}" | jq -r '.result.subdomain')" >> "$GITHUB_OUTPUT"
          echo "RESULT_DOMAINS=$(echo "${RESULT_RESPONSE}" | jq -r '.result.domains | join(",")')" >> "$GITHUB_OUTPUT"
          echo "RESULT_SUCCESS=$(echo "${RESULT_RESPONSE}" | jq -r '.success')" >> $GITHUB_ENV
          echo "RESULT_SUCCESS=$(echo "${RESULT_RESPONSE}" | jq -r '.success')" >> "$GITHUB_OUTPUT"

  prepare:
    runs-on: ubuntu-latest
    name: Prepare Custom domains
    needs: deploy
    steps:
      - name: Prepare script
        run: |
          echo "Deploy Pages ${{ needs.deploy.result }}"
          echo "${{needs.deploy.outputs.RESULT_ID}}"
          echo "${{needs.deploy.outputs.RESULT_NAME}}"
          echo "${{needs.deploy.outputs.RESULT_SUBDOMAIN}}"
          echo "${{needs.deploy.outputs.RESULT_DOMAINS}}"
          echo "${{needs.deploy.outputs.RESULT_SUCCESS}}"

          RESULT_NAME="demo-actions-pages.alruaex126.us.kg"

          RESULT_RESPONSE=$(curl -s https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects/${{needs.deploy.outputs.RESULT_NAME}}/domains/${RESULT_NAME} \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json")

          if [[ "$(echo "${RESULT_RESPONSE}" | jq -r '.success')" == "true" ]]; then exit 0; else exit 1; fi

          # json_data=$(cat <<EOF
          # {
          #   "name": "${MY_PROJECT_NAME}.alruaex126.us.kg"
          # }
          # EOF
          # )
          # curl https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects/$MY_PROJECT_NAME/domains \
          #     -H 'Content-Type: application/json' \
          #     -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
          #     -d "$json_data"
